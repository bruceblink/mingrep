name: Release

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  releaser:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.extract-version.outputs.version }}
      release_id: ${{ steps.capture-release-id.outputs.release_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version tag
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.version_tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $TAG. Use vX.Y.Z"
            exit 1
          fi

          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$TAG" >> $GITHUB_ENV

      - name: Fetch all tags
        run: git fetch --force --tags

      - name: Setup Go (optional)
        if: ${{ hashFiles('**/*.go') != '' }}
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Setup Python (optional)
        if: ${{ hashFiles('**/*.py') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Create Python Release Package (if Python project)
        if: ${{ hashFiles('**/*.py') != '' }}
        run: |
          python -m pip install build twine
          python -m build
          twine check dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Setup Rust
        if: ${{ hashFiles('**/*.rs') != '' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build with Cargo (if Rust project)
        if: ${{ hashFiles('**/*.rs') != '' }}
        run: cargo build --release

      - name: Package Rust Binary (if Rust project)
        if: ${{ hashFiles('**/*.rs') != '' }}
        run: |
          mkdir -p dist
          cp target/release/minigrep dist/

      - name: Get previous tag
        id: get-prev-tag
        run: |
          git fetch --tags --force
          # 升序排列的tag列表
          TAGS=$(git tag --list 'v*' --sort=v:refname)
          CURRENT_TAG="${{ env.VERSION_TAG }}"
          # 如果当前标签是最新的，则获取上一个标签(git自带的命令)
          PREV_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          PREV=${{ steps.get-prev-tag.outputs.prev_tag }}
          if [ -z "$PREV" ]; then
            echo "首次发布，跳过 Changelog 生成"
            echo "changelog=" >> $GITHUB_OUTPUT
          else
            RANGE="$PREV..${{ env.VERSION_TAG }}"
            echo "Changelog 范围: $RANGE"
            if [ -f .github/changelog-include-prefixes.txt ] && [ -s .github/changelog-include-prefixes.txt ]; then
              PREFIXES=$(paste -sd'|' .github/changelog-include-prefixes.txt)
              echo "使用前缀过滤: $PREFIXES"
              CHANGELOG=$(git log $RANGE --pretty=format:"%h %s" | grep -E "^[a-f0-9]+ ($PREFIXES):" || true)
            else
              echo "未设置前缀过滤，输出全部 commit"
              CHANGELOG=$(git log $RANGE --pretty=format:"%h %s")
            fi
            echo "生成的 CHANGELOG:"
            echo "$CHANGELOG"
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: ${{ env.VERSION_TAG }}
          body: ${{ steps.changelog.outputs.changelog || 'Initial release' }}
          prerelease: ${{ contains(env.VERSION_TAG, '-') }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Capture Release ID
        id: capture-release-id
        run: |
          echo "release_id=${{ steps.create-release.outputs.id }}" >> $GITHUB_OUTPUT

      - name: Publish to crates.io (if Rust project)
        if: ${{ hashFiles('**/*.rs') != '' && github.event_name == 'workflow_dispatch' }}
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
